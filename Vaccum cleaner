from collections import deque

# Define the environment (2x2 grid)
# 1 represents a dirty cell, 0 represents a clean cell
initial_grid = [
    [1, 1],
    [0, 1]
]

# Define the possible moves (up, down, left, right)
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Function to check if a position is within the grid bounds
def is_within_bounds(x, y):
    return 0 <= x < 2 and 0 <= y < 2

# Function to check if all cells are clean
def is_clean(grid):
    return all(cell == 0 for row in grid for cell in row)

# Breadth-First Search to solve the vacuum cleaner problem
def bfs_vacuum_cleaner(initial_grid):
    # Initialize the queue with the initial state (grid, vacuum position)
    queue = deque([(initial_grid, 0, 0)])
    visited = set()

    while queue:
        grid, x, y = queue.popleft()

        # Check if the current state is the goal state
        if is_clean(grid):
            return True

        # Mark the current cell as clean
        grid[x][y] = 0

        # Generate all possible moves
        for move in moves:
            new_x, new_y = x + move[0], y + move[1]

            # Check if the new position is within bounds and not visited
            if is_within_bounds(new_x, new_y):
                new_grid = [row[:] for row in grid]
                state = (tuple(map(tuple, new_grid)), new_x, new_y)

                if state not in visited:
                    visited.add(state)
                    queue.append((new_grid, new_x, new_y))

    return False

# Run the BFS algorithm
result = bfs_vacuum_cleaner(initial_grid)
if result:
    print("All cells are clean.")
else:
    print("Unable to clean all cells.")
